/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkg8puzzle;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import static pkg8puzzle.Puzzle.list;
import static pkg8puzzle.Puzzle.list2;
import static pkg8puzzle.Puzzle.timeOfExecution;
import static pkg8puzzle.Puzzle.solved;
import static pkg8puzzle.Puzzle.countOfStates;


/**
 *
 * @author behzad
 */
public class MainFrame extends javax.swing.JFrame {

    private BufferedImage back;
    private final JLabel lables[];
    LinkedList<String> moves = new LinkedList<>();
    private JLabel lbl_to_move = null;
    byte[] tiles = new byte[9];
    private String preOrder = "";
    private static int g = 0;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        setLocation(512, 312);
        btnShuffle.setRolloverIcon(new ImageIcon("F:\\JavaProjects\\8Puzzle\\src\\pics\\btn_shuffle_pressed.png"));
        btnSolve.setRolloverIcon(new ImageIcon("F:\\JavaProjects\\8Puzzle\\src\\pics\\btn_solve.png"));
        btnShow.setRolloverIcon(new ImageIcon("F:\\JavaProjects\\8Puzzle\\src\\pics\\btn_show_p.png"));
        try {
            back = ImageIO.read(new File("F:\\JavaProjects\\8Puzzle\\src\\pics\\back.png"));
        } catch (IOException e) {
            System.out.println(e.getMessage());
        }
        lables = new JLabel[]{jLabelZero, jLabel1, jLabel2, jLabel3, jLabel4, jLabel5, jLabel6, jLabel7, jLabel8};
        lables[1].setLocation(20, 21);
        lables[2].setLocation(83, 21);
        lables[3].setLocation(146, 21);
        lables[4].setLocation(20, 85);
        lables[5].setLocation(83, 85);
        lables[6].setLocation(146, 85);
        lables[7].setLocation(20, 149);
        lables[8].setLocation(83, 149);
        lables[0].setLocation(146, 149);
    }

    private class MyPanel extends JPanel {

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            g.drawImage(back, 0, 0, getWidth(), getHeight(), this);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelInput = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        btnShuffle = new javax.swing.JButton();
        jPanel1 = new MyPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabelZero = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        list1 = new java.awt.List();
        btnSolve = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jTextFieldTime = new javax.swing.JTextField();
        jTextFieldPaths = new javax.swing.JTextField();
        jTextFieldStatesExplored = new javax.swing.JTextField();
        jTextFieldMovesReq = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jTextFieldStatus = new javax.swing.JTextField();
        btnShow = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Puzzle 8");
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(0, 0, 0));
        setForeground(java.awt.Color.red);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabelInput.setFont(new java.awt.Font("Caviar Dreams", 1, 15)); // NOI18N
        jLabelInput.setLabelFor(jTextField1);
        jLabelInput.setText("Initial State");

        jTextField1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField1.setToolTipText("inter your State");
        jTextField1.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 0)));
        jTextField1.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                jTextField1InputMethodTextChanged(evt);
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
        });

        btnShuffle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/btn_shuffle.png"))); // NOI18N
        btnShuffle.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnShuffle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShuffleActionPerformed(evt);
            }
        });

        jPanel1.setPreferredSize(new java.awt.Dimension(400, 400));

        jLabel2.setFont(new java.awt.Font("B Titr", 1, 36)); // NOI18N
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/t2.png"))); // NOI18N
        jLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel2.setFocusable(false);
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel2.setIconTextGap(0);

        jLabel8.setFont(new java.awt.Font("B Titr", 1, 36)); // NOI18N
        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/t8.png"))); // NOI18N
        jLabel8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel8.setFocusable(false);
        jLabel8.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel8.setIconTextGap(0);

        jLabel7.setFont(new java.awt.Font("B Titr", 1, 36)); // NOI18N
        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/t7.png"))); // NOI18N
        jLabel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel7.setFocusable(false);
        jLabel7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel7.setIconTextGap(0);

        jLabel3.setFont(new java.awt.Font("B Titr", 1, 36)); // NOI18N
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/t3.png"))); // NOI18N
        jLabel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel3.setFocusable(false);
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel3.setIconTextGap(0);

        jLabel4.setFont(new java.awt.Font("B Titr", 1, 36)); // NOI18N
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/t4.png"))); // NOI18N
        jLabel4.setAlignmentY(0.0F);
        jLabel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel4.setFocusable(false);
        jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel4.setIconTextGap(0);
        jLabel4.setPreferredSize(new java.awt.Dimension(17, 39));

        jLabel5.setFont(new java.awt.Font("B Titr", 1, 36)); // NOI18N
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/t5.png"))); // NOI18N
        jLabel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel5.setFocusable(false);
        jLabel5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel5.setIconTextGap(0);

        jLabel6.setFont(new java.awt.Font("B Titr", 1, 36)); // NOI18N
        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/t6.png"))); // NOI18N
        jLabel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel6.setFocusable(false);
        jLabel6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel6.setIconTextGap(0);

        jLabelZero.setFont(new java.awt.Font("B Titr", 1, 36)); // NOI18N
        jLabelZero.setFocusable(false);
        jLabelZero.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabelZero.setIconTextGap(0);

        jLabel1.setFont(new java.awt.Font("B Titr", 1, 36)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/t1.png"))); // NOI18N
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel1.setFocusable(false);
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel1.setIconTextGap(0);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel8)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(jLabel6))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelZero, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5))
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabelZero, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        btnSolve.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/btn_solve_pressed.png"))); // NOI18N
        btnSolve.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnSolve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSolveActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Bitstream Charter", 0, 15)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setLabelFor(list1);
        jLabel9.setText("Moves");
        jLabel9.setToolTipText("جابجایی هایی که باید روی خانه خالی صورت بگیرد");

        jLabel10.setFont(new java.awt.Font("Bitstream Charter", 0, 15)); // NOI18N
        jLabel10.setText("Execution Time");

        jLabel11.setFont(new java.awt.Font("Bitstream Charter", 0, 15)); // NOI18N
        jLabel11.setText("All Expanded States");

        jLabel12.setFont(new java.awt.Font("Bitstream Charter", 0, 15)); // NOI18N
        jLabel12.setText("All Visited States");

        jLabel13.setFont(new java.awt.Font("Bitstream Charter", 0, 15)); // NOI18N
        jLabel13.setText("All Moves");

        jTextFieldTime.setEditable(false);
        jTextFieldTime.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jTextFieldTime.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldTime.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jTextFieldPaths.setEditable(false);
        jTextFieldPaths.setBackground(new java.awt.Color(238, 245, 245));
        jTextFieldPaths.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jTextFieldPaths.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldPaths.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jTextFieldStatesExplored.setEditable(false);
        jTextFieldStatesExplored.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jTextFieldStatesExplored.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldStatesExplored.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jTextFieldMovesReq.setEditable(false);
        jTextFieldMovesReq.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jTextFieldMovesReq.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldMovesReq.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        jLabel14.setFont(new java.awt.Font("Bitstream Charter", 0, 15)); // NOI18N
        jLabel14.setText("Status");

        jTextFieldStatus.setEditable(false);
        jTextFieldStatus.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jTextFieldStatus.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldStatus.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        btnShow.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/btn_show.png"))); // NOI18N
        btnShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(256, 256, 256)
                .addComponent(btnShuffle, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSolve, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(50, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnShow, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel14)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(list1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldPaths)
                            .addComponent(jTextFieldStatesExplored)
                            .addComponent(jTextFieldMovesReq, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                            .addComponent(jTextFieldTime, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(14, 14, 14))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelInput)
                        .addContainerGap())))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jTextFieldMovesReq, jTextFieldPaths, jTextFieldStatesExplored, jTextFieldTime});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addGap(18, 18, 18)
                .addComponent(btnShow, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelInput)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnSolve)
                    .addComponent(btnShuffle, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jTextFieldPaths, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextFieldTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextFieldStatesExplored, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextFieldMovesReq, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                        .addGap(91, 91, 91))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(list1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnShuffleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShuffleActionPerformed
        tiles=Arrays.copyOf(getRandomArray(9, false), tiles.length);
        initialLables();
        String str="";
        for(byte b:tiles){
            str+=b+",";
        }
        jTextField1.setText(str.substring(0,str.length()-1));

    }//GEN-LAST:event_btnShuffleActionPerformed

    
    /////////////////{ just thease 3 method are copy from : http://www.brian-borowski.com/ } just for shuffle button
    
    public static byte[] getRandomArray(final int numOfTiles, final boolean keepZeroInCorner) {
        final byte[] tiles = new byte[numOfTiles];
        for (int i = numOfTiles - 2; i >= 0; --i) {
            tiles[i] = (byte)(i + 1);
        }
        tiles[numOfTiles - 1] = 0;

        int maxTilesToSwap;
        if (keepZeroInCorner) {
            maxTilesToSwap = numOfTiles - 1;
        } else {
            maxTilesToSwap = numOfTiles;
        }
        final Random random = new Random();
        for (int i = 49; i >= 0; --i) {
            final int rand1 = random.nextInt(maxTilesToSwap);
            int rand2 = random.nextInt(maxTilesToSwap);
            if (rand1 == rand2) {
                if (rand1 < (maxTilesToSwap << 1)) {
                    rand2 = random.nextInt(maxTilesToSwap - rand1) + rand1;
                } else {
                    rand2 = random.nextInt(rand1);
                }
            }
            swap(rand1, rand2, tiles);
        }
        if (!isValidPermutation(tiles)) {
            if (tiles[0] != 0 && tiles[1] != 0) {
                swap(0, 1, tiles);
            } else {
                swap(2, 3, tiles);
            }
        }
        return tiles;
    }

    public static boolean isValidPermutation(final byte[] state) {
        final int numOfTiles = state.length,
                  dim = (int)Math.sqrt(numOfTiles);
        int inversions = 0;

        for (int i = 0; i < numOfTiles; ++i) {
            final byte iTile = state[i];
            if (iTile != 0) {
                for (int j = i + 1; j < numOfTiles; ++j) {
                    final byte jTile = state[j];
                    if (jTile != 0 && jTile < iTile) {
                        ++inversions;
                    }
                }
            } else {
                if ((dim & 0x1) == 0) {
                    inversions += (1 + i / dim);
                }
            }
        }
        if ((inversions & 0x1) == 1) return false;
        return true;
    }
    
    private static void swap(final int i, final int j, final byte[] A) {
        final byte temp = A[i];
        A[i] = A[j];
        A[j] = temp;
    }
    
    
    /////////////////////////////// end of copy for shuffle button
    
    private void moveUp() {
        boolean find = false;
        for (JLabel lable : lables) {
            if ((jLabelZero.getLocation().y == lable.getLocation().y + 64
                    || jLabelZero.getLocation().y == lable.getLocation().y + 65
                    || jLabelZero.getLocation().y == lable.getLocation().y + 63)
                    && jLabelZero.getLocation().x == lable.getLocation().x) {
                lbl_to_move = lable;
                find = true;
                break;
            }
        }
        if (find) {
            Thread t = new Thread(() -> {
                for (int i = 0; i < 64; i++) {
                    lbl_to_move.setLocation(lbl_to_move.getLocation().x, lbl_to_move.getLocation().y + 1);
                    jLabelZero.setLocation(jLabelZero.getLocation().x, jLabelZero.getLocation().y - 1);
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            });
            t.start();
        }
    }

    private void moveDown() {
        boolean find = false;
        for (JLabel lable : lables) {
            if ((jLabelZero.getLocation().y == lable.getLocation().y - 64
                    || jLabelZero.getLocation().y == lable.getLocation().y - 65
                    || jLabelZero.getLocation().y == lable.getLocation().y - 63)
                    && jLabelZero.getLocation().x == lable.getLocation().x) {
                lbl_to_move = lable;
                find = true;
                break;
            }
        }
        if (find) {
            Thread t = new Thread(() -> {
                for (int i = 0; i < 64; i++) {
                    lbl_to_move.setLocation(lbl_to_move.getLocation().x, lbl_to_move.getLocation().y - 1);
                    jLabelZero.setLocation(jLabelZero.getLocation().x, jLabelZero.getLocation().y + 1);
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            });
            t.start();
        }

    }

    private void moveLeft() {
        boolean find = false;
        for (JLabel lable : lables) {
            if ((jLabelZero.getLocation().x == lable.getLocation().x + 64
                    || jLabelZero.getLocation().x == lable.getLocation().x + 63)
                    && jLabelZero.getLocation().y == lable.getLocation().y) {
                lbl_to_move = lable;
                find = true;
                break;
            }
        }
        if (find) {
            Thread t = new Thread(() -> {
                for (int i = 0; i < 63; i++) {
                    lbl_to_move.setLocation(lbl_to_move.getLocation().x + 1, lbl_to_move.getLocation().y);
                    jLabelZero.setLocation(jLabelZero.getLocation().x - 1, jLabelZero.getLocation().y);
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            });
            t.start();
        }
    }

    private void moveRight() {
        boolean find = false;

        for (JLabel lable : lables) {
            if ((jLabelZero.getLocation().x == lable.getLocation().x - 64
                    || jLabelZero.getLocation().x == lable.getLocation().x - 63)
                    && jLabelZero.getLocation().y == lable.getLocation().y) {
                lbl_to_move = lable;
                find = true;
                break;
            }
        }
        if (find) {
            Thread t = new Thread(() -> {
                for (int i = 0; i < 63; i++) {
                    lbl_to_move.setLocation(lbl_to_move.getLocation().x - 1, lbl_to_move.getLocation().y);
                    jLabelZero.setLocation(jLabelZero.getLocation().x + 1, jLabelZero.getLocation().y);
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            });
            t.start();
        }
    }

    private void initialLables() {

        lables[tiles[0]].setLocation(20, 21);
        lables[tiles[1]].setLocation(83, 21);
        lables[tiles[2]].setLocation(146, 21);
        lables[tiles[3]].setLocation(20, 85);
        lables[tiles[4]].setLocation(83, 85);
        lables[tiles[5]].setLocation(146, 85);
        lables[tiles[6]].setLocation(20, 149);
        lables[tiles[7]].setLocation(83, 149);
        lables[tiles[8]].setLocation(146, 149);

    }

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        //JOptionPane.showMessageDialog(rootPane, "asdad");
    }//GEN-LAST:event_formWindowOpened

    private void btnSolveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSolveActionPerformed
        if (jTextField1.getText().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Please Enter a Start State ", "Tile Order is Empty!!", 2);
        } else {
            if (!jTextField1.getText().equals(preOrder)) {
                preOrder = jTextField1.getText();
            } else {
                return;
            }
            Puzzle.queue.clear();
            Puzzle.closed.clear();
            solved = false;
            list1.removeAll();
            String[] tiles_s = jTextField1.getText().split(",");
            if (tiles_s.length > 9 || tiles_s.length < 9) {
                JOptionPane.showMessageDialog(rootPane, "Enter a Valid Tile Order ", "Invalid Input", 2);
                return;
            }
            for (int i = 0; i < tiles_s.length; i++) {
                tiles[i] = Byte.parseByte(tiles_s[i]);
            }
            initialLables();
            new Puzzle().solve(tiles);
            int ssss=list.size();
            while (list.size() > 1) {
                Puzzle.State s1 = list.pollFirst();
                Puzzle.FGH fgh = list2.pollFirst();
                Puzzle.State s2 = s1;
                if (!list.isEmpty()) {
                    s2 = list.peekFirst();
                }
                String m = Puzzle.getMove(s1, s2);
                if (!m.equals("unknown")) {
                    moves.add(m);
                    list1.add(++g + ". " + m + "     h1: " + (fgh.h));
                }
            }
            jTextFieldMovesReq.setText(list1.getItemCount() + "");
            if (list1.getItemCount() <= 0 && solved != true) {
                jTextFieldStatus.setText("This Puzzle is UnSolvable!");
                JOptionPane.showMessageDialog(rootPane, "This Puzzle is UnSolvable !!!", "UnSolvable", 2);
            }
            jTextFieldTime.setText(timeOfExecution + "  s");
            jTextFieldStatus.setText("Solution found !!");
            jTextFieldPaths.setText(ssss + "");
            jTextFieldStatesExplored.setText(countOfStates + "");
        }
    }//GEN-LAST:event_btnSolveActionPerformed

    private void jTextField1InputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jTextField1InputMethodTextChanged
        Puzzle.queue.clear();
        Puzzle.closed.clear();
        solved = false;
        g = 0;
    }//GEN-LAST:event_jTextField1InputMethodTextChanged

    private void btnShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowActionPerformed
        if (list1.getItemCount() > 0) {
            
            Thread t = new Thread(() -> {
                int i=0;
                while (moves.size() > 0) {
                    try {
                        String mo=moves.pollFirst();
                        list1.select(i);
                        switch (mo) {
                            case "up":
                                moveUp();
                                break;
                            case "down":
                                moveDown();
                                break;
                            case "left":
                                moveLeft();
                                break;
                            case "right":
                                moveRight();
                                break;
                        }
                        Thread.sleep(2000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    i++;
                }
            });
            t.start();
        }
    }//GEN-LAST:event_btnShowActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            
            new MainFrame().setVisible(true);
            
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnShow;
    private javax.swing.JButton btnShuffle;
    private javax.swing.JButton btnSolve;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelInput;
    private javax.swing.JLabel jLabelZero;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextFieldMovesReq;
    private javax.swing.JTextField jTextFieldPaths;
    private javax.swing.JTextField jTextFieldStatesExplored;
    private javax.swing.JTextField jTextFieldStatus;
    private javax.swing.JTextField jTextFieldTime;
    private java.awt.List list1;
    // End of variables declaration//GEN-END:variables
}
